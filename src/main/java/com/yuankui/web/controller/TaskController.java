package com.yuankui.web.controller;


import com.yuankui.web.entity.Task;
import com.yuankui.web.repository.TaskRepository;

import org.hibernate.exception.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;


@Controller    // This means that this class is a Controller
@RequestMapping(path = "/task") // This means URL's start with /demo (after Application path)
public class TaskController {

  @Autowired // This means to get the bean called taskRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private TaskRepository taskRepository;

  @GetMapping(path = "/new")
  public String newTask(Model model) {
    model.addAttribute("action", "/task/add");
    model.addAttribute("task", new Task());
    return "task/form";
  }

  @PostMapping(path = "/add") // Map ONLY GET Requests
  public String addNewTask(Task task, Model model) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    try {
      taskRepository.save(task);
    } catch (Exception e) {
      model.addAttribute("task", task);
      model.addAttribute("action", "");
      model.addAttribute("error", e.getMessage());
      return "task/form";
    }
    return "redirect:/task/list";
  }

  @PostMapping(path = "/update") // Map ONLY GET Requests
  public String update(Task task) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    taskRepository.save(task);
    return "redirect:/task/list";
  }

  @GetMapping(path = "/list")
  public String getAllTasks(Model model) {
    // This returns a JSON or XML with the tasks
    Iterable<Task> tasks = taskRepository.findAll();
    model.addAttribute("tasks", tasks);
    return "task/list";
  }

  @GetMapping(path = "/edit/{id}")
  public String editTask(@PathVariable Integer id, Model m) {
    Task task = taskRepository.findOne(id.longValue());
    m.addAttribute("task", task);
    m.addAttribute("action", "/task/update");
    return "task/form";
  }
}